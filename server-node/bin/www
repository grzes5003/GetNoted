#!/usr/bin/env node
const createError = require('http-errors');
const {ApolloServer, gql} = require("apollo-server-express");
const {importSchema} = require('graphql-import');
const {resolver} = require('../gql/resolvers');

const typeDefs = importSchema('./gql/schema.graphql');

/**
 * Module dependencies.
 */
const app = require('../app');
const debug = require('debug')('server-node:server');
const http = require('http');
const client = require('../redis-client/client');
const {getUser} = require("../auth/util");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '4000');
app.set('port', port);

/**
 *
 */

//console.log(resolver);

const apolloServer = new ApolloServer({
    typeDefs: typeDefs,
    resolvers: resolver,
    context: ({ req , res}) => {
        //console.log('my req is: ', req);
        if(req) {
            const token = req.headers['authorization'] || '';
            console.log('got new token context with: ', token);

            const username = getUser(token);

            console.log('got new context username with: ', username);
            //console.log('got new auth with: ', req.headers['authorization']);
            //console.log('got new context with: ', username);
            return { username };
        }
        // add the user to the context
        return { username: '' };
    }
});

// subscriptions: {
//     onConnect: (connectionParams, webSocket, context) => {
//         console.log("connected")
//     },
//         onDisconnect: (webSocket, context) => {
//         console.log("disconnected")
//     },
// },

const PATH_GRAPHQL = '/graphql';

apolloServer.applyMiddleware({app, path: PATH_GRAPHQL});

// catch 404 and forward to error handler
app.use(function (req, res, next) {
   next(createError(404));
});

// redis client setup
client.setup();

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
apolloServer.installSubscriptionHandlers(server);

console.log(`ðŸš€ Server ready at http://localhost:${port}${apolloServer.graphqlPath}`);
console.log(`ðŸš€ Subscriptions ready at ws://localhost:${port}${apolloServer.subscriptionsPath}`);

/**
 * Listen on provided port, on all network interfaces.
 */

app.use('/', function (req, res) {
    res.sendFile(path.join(__dirname, 'public/build/index.html'));
});

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    let port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
